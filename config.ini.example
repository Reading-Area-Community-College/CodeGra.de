# This section describes to uwsgi how to run the back-end.
[uwsgi]
# The user to run the backend as, change this option.
# uid =
# The usergroup to run the backend as, change this option.
# gid =


# The directory psef lives in, change this option.
# base = $DIR_TO_PSEF

# project = psef
# chdir = %(base)
# virtualenv = %(base)/env/
# module = %(project):create_app()

# The way to let uwsgi log
# logger = file:/var/log/nginx/psef.uwsgi.log

# The location and chmod mode of the socket
# socket = %(base)/psef.sock
# chmod-socket = 666

# master = true
# processes = 5

# Thread should work, however they are not tested in our CI, nor are they used
# in production anywhere as far as we are aware. It is probably better to keep
# threads disabled and simply use processes.
# enable-threads = false

# Set debug to off
# env = DEBUG=false

# This section contains compile constant for the front-end, these are solely
# used for presentation purposes.
[Front-end]
# The email to display
# email = info@CodeGra.de

# This section is for the options of the backend.
[Back-end]
# Enable debug mode. Set this to off for production mode.
# debug = false

# The base directory where psef lives. This defaults to the directory where
# `config.py` sits.
# base_dir =

# The following settings are used for sending outbound emails for password reset
# emails.
# mail_server = localhost
# mail_port = 25
# mail_use_tls = false
# mail_use_ssl = false
# mail_username =
# mail_password =
# mail_default_sender =
# mail_max_emails =

# This is the template that gets sent to the users if they request a new
# password. Double newlines are replaces by '<br><br>', this is the html part of
# the email, the txt part gets sent automatically. You can use the following
# data in this template (all between {}):
# - user_name: The name of the user
# - user_email: The email of the user
# - user_id: The name of the user
# - site_url: The url of the site
# - url: The url to reset the password
# - token: The token to reset the password with
# email_template = <p>Dear {user_name},
#
#   This email lets you reset your password on <a
#   href="{site_url}">{site_url}</a>. If you go to <a href="{url}">this page</a>
#   you can reset your password there. Please do not reply to this email.
#
#   If you have not triggered this action please ignore this email.</p>

# This is the template that gets sent to the graders when they are reminded they
# should start/resume grading. Double newlines are replaced by '<br><br>'. This
# is the html part of the email, the txt part gets generated automatically. You
# can use the following variables in this template (all between {}):
# - user_name: The name of the user
# - user_email: The email of the user
# - site_url: The url of the site
# - assig_id: The id of the assignemt to grade
# - course_id: The id of the course of this assignment
# reminder_template = <p>Dear {user_name},
#
# This email is a reminder that you have work left to grade on the assignment
# "{assig_name}" on <a href="{site_url}">{site_url}</a>. If you go to <a
# href="{url}">this page</a> you can directly continue grading, which of
# course is joyful business on CodeGra.de! Good luck with grading.</p>
#
# This email was automatically sent because of reminder that was set for this
# assignment and you have not yet indicated you were done grading. You can
# indicate this <a href="{site_url}/courses/{course_id}">here</a>.

# This is the template that gets sent to graders when their status is reset to
# 'not done' by something that is not them selves toggeling it. The rules and
# variables for this template are the same as for the `reminder_template`
# variable.
# grader_status_template = <p>Dear {user_name},
#
# This email is a reminder that your grade status has been reset to 'not done'
# for "{assig_name}" on <a href="{site_url}">{site_url}</a>. If you go to <a
# href="{site_url}/courses/{course_id}/assignments/{assig_id}/submissions">this
# page</a> you can directly continue grading, which of course is joyful business
# on CodeGra.de! Good luck with grading.
#
# This email was automatically sent. The reason for this can be that a course
# admin has reset your status or that you have been assigned new
# submission(s).</p>

# This is the template that gets sent to the configured email addresses when
# grading is done.  Double newlines are replaced by '<br><br>'. This
# is the html part of the email, the txt part gets generated automatically. You
# can use the following variables in this template (all between {}):
# - site_url: The url of the site
# - assig_id: The id of the assignemt of which grading is done
# - assig_name: The name of the assignment
# - course_id: The id of the course of this assignment
# done_template = <p>Dear,
#
# This email has been sent to let you know that all work has been graded on the
# assignment "{assig_name}" on <a href="{site_url}">{site_url}</a>. If you go to
# <a href="{site_url}/courses/{course_id}">this page</a> you can set the state
# of the assignment to 'done' so that the students can see their grade!
#
# This email was automatically sent because of reminder that was set for this
# assignment. You can change these settings <a
# href="{site_url}/courses/{course_id}">here</a></p>.

# Time in seconds a user has to reset his or her password after the e-mail is
# sent in seconds.
# reset_token_time = 86400

# Define the database. If `CODEGRADE_DATABASE_URL` is found in the enviroment
# variables it is used. The string should be in this format for postgresql:
# `postgresql://dbusername:dbpassword@dbhost/dbname`
# sqlalchemy_database_uri = postgresql:///codegrade_dev

# The amount of bytes that should be used for randomly generation JWT keys.
# You should probably not change this.
# bytes_random = 64

# Secret key for signing session JWT tokens.
# By default a random string is used if debug mode is off. This is secure but
# means users have to login again after restarting the server
# secret_key = Wowsers

# Secret key for signing LTI tokens. This should be a strong random key that is
# not public. By default a random strings of %(bytes_random)s amount of bytes is
# generated during startup. It might be best to not change this. These tokens
# have a very short lifetime so restarting the server will always mean a LTI
# launch will never work if you restart the server while launching.
# lti_secret_key =

# The amount of days until a login token should expire in days. Can be a float
# jwt_access_token_expires = 30

# Path for storage of uploaded files.
# WARNING: Make sure these directories exist.
# upload_dir = %(BASE_DIR)s/uploads
# mirror_upload_dir = %(BASE_DIR)s/mirror_uploads

# Maximum size in bytes for single upload request in bytes, defaults to 64 * 2
# ** 20 = 64 megabytes.
# max_upload_size = 67108864

# The default site role a user should get. The name of this role should be
# present as a key in `seed_data/roles.json`.
# default_role = Student

# The external URL the server runs on.
# external_url = http://localhost:8080

# Path to the java runtime executable. May also be just the name of the
# executable, if it is in a directory in the PATH environment variable.
# java_path = java

# Path to jplag.jar. The path must be absolute or relative to the working
# directory of the celery instance.
# jplag_jar = jplag.jar

# This section enables you to disable certain features. If you change this
# config you need to rebuild/restart the front-end and restart the backend
# otherwise the changes are not applied.
[Features]
# Should any user be able to upload blackboard zips. If this is enabled
# sometimes the username can collide with another user, meaning work is
# uploaded for the wrong user. This option is UNSAFE to enable when working
# on a multiple school instance.
# blackboard_zip_upload = true

# Should rubrics be enabled. This means rubrics can be created by teachers
# and used for grading purposes.
# rubrics = true

# Should we automatically create a default role for LTI launches with roles
# that are not known.
# automatic_lti_role = true

# Should LTI be enabled.
# LTI = true

# Should linters be enabled
# linters = true

# Should rubrics be submitted incrementally, so if a user selects a item should
# this be automatically be submitted to the server, or should it only be
# possible to submit a complete rubric at once. This feature is useless if
# `rubrics` is not set to `true`.
# incremental_rubric_submission = true

# Should it be possible to register on the website. This makes it possible for
# any body to register an account on the website. The role they are given is
# determined by `default_role` (see above).
# register = true

# All LTI consumer keys mapped to secret keys. Please add your own, these ARE
# case sensitive.
[LTI Consumer keys]
# my_lti = my_secret_key

# This are the settings for celery. You need to be running a celery process to
# run codegra.de. All config options here are passed directly to celery
[Celery]
# The broker has to be configured using the variable below. See [0] for
# information how to format this variable, we recommend using RabbitMQ. Please
# don't forgot to install the needed dependencies for your broker.
#
# [0]: http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html
# broker_url = amqp://myuser:mypassword@localhost:5672/myvhost
